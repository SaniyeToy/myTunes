//
//  MyTunesListViewController.swift
//  myTunes
//
//  Created by MacOS on 23.03.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol MyTunesListDisplayLogic: AnyObject
{
    func displayMyTunes(viewModel: MyTunesList.Fetch.ViewModel)
    
}

final class MyTunesListViewController: UIViewController {
    
    var interactor: MyTunesListBusinessLogic?
    var router: ( MyTunesListRoutingLogic & MyTunesListDataPassing)?
    var viewModel: MyTunesList.Fetch.ViewModel?
    var gridFlowLayout = GridFlowLayout()
    @IBOutlet weak var myTunesSearchBar: UISearchBar!
    @IBOutlet weak var myTunesCollectionView: UICollectionView!
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern
    
    private func setup() {
        let viewController = self
        let interactor = MyTunesListInteractor(worker: MyTunesListWorker())
        let presenter = MyTunesListPresenter()
        let router = MyTunesListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        myTunesCollectionView.collectionViewLayout = gridFlowLayout
        let nib = UINib(nibName: "MyTunesCollectionViewCell", bundle: nil)
        myTunesCollectionView.register(nib, forCellWithReuseIdentifier: "myTunesCell")
    }
}

extension MyTunesListViewController: MyTunesListDisplayLogic{
    func displayMyTunes(viewModel: MyTunesList.Fetch.ViewModel)
    {
        self.viewModel = viewModel
        myTunesCollectionView.reloadData()
    }
}


extension MyTunesListViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return viewModel?.myTunesList.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "myTunesCell", for: indexPath) as! MyTunesCollectionViewCell
        let model = self.viewModel?.myTunesList[indexPath.item]
        cell.artistname.text = model?.artistName
        cell.trackName.text = model?.trackName
        cell.wrapperType.text = model?.wrapperType
        cell.kind.text = model?.kind
        cell.artWorkImageView.kf.setImage(with: URL(string: (model?.artworkUrl60)!))
        return cell
    }
}


// MARK: - SearchBar Delegate

extension MyTunesListViewController : UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        NSObject.cancelPreviousPerformRequests(withTarget: self, selector: #selector(MyTunesListViewController.reload), object: nil)
        self.perform(#selector(MyTunesListViewController.reload), with: nil, afterDelay: 0.7)
    }
    
    @objc func reload() {
        guard let searchText = myTunesSearchBar.text else { return }
        
        if searchText == "" {
            self.viewModel?.myTunesList.removeAll()
            myTunesCollectionView.reloadData()
        } else {
            search(searchText: searchText)
        }
    }
    
    func search(searchText: String){
        var params = [String: Any]()
        params["term"] = searchText
        interactor?.fetchMyTunesList(params: params)
    }
}

