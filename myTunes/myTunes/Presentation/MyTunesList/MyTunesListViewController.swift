//
//  MyTunesListViewController.swift
//  myTunes
//
//  Created by MacOS on 23.03.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher
import McPicker

protocol MyTunesListDisplayLogic: AnyObject
{
    func displayMyTunes(viewModel: MyTunesList.Fetch.ViewModel)
    
}

final class MyTunesListViewController: UIViewController {
    
    var interactor: MyTunesListBusinessLogic?
    var router: ( MyTunesListRoutingLogic & MyTunesListDataPassing)?
    var viewModel: MyTunesList.Fetch.ViewModel?
    var gridFlowLayout = GridFlowLayout()
    let filter : [String] = [ "movie", "podcast", "music", "musicVideo", "audiobook", "shortFilm", "tvShow" , "software", "ebook", "all"]
    @IBOutlet weak var myTunesSearchBar: UISearchBar!
    @IBOutlet weak var myTunesCollectionView: UICollectionView!
    @IBOutlet weak var selectKindButton: UIButton!
    
    var params = [String:Any](){
        didSet{
            interactor?.fetchMyTunesList(params: params)
        }
    }
    
    
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern
    
    private func setup() {
        let viewController = self
        let interactor = MyTunesListInteractor(worker: MyTunesListWorker())
        let presenter = MyTunesListPresenter()
        let router = MyTunesListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationItem.setHidesBackButton(true, animated: true)
        self.navigationController?.navigationBar.backgroundColor = .clear
        self.title = "MyTunesList"
        navigationController?.navigationBar.titleTextAttributes = [.foregroundColor: UIColor.systemBlue]
       
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        myTunesCollectionView.collectionViewLayout = gridFlowLayout
        let nibTr = UINib(nibName: "TrackCollectionViewCell", bundle: nil)
        myTunesCollectionView.register(nibTr, forCellWithReuseIdentifier: "trackCell")
        let nibCl = UINib(nibName: "CollectionCollectionViewCell", bundle: nil)
        myTunesCollectionView.register(nibCl, forCellWithReuseIdentifier: "collectionCell")
        let nibAr = UINib(nibName: "ArtistCollectionViewCell", bundle: nil)
        myTunesCollectionView.register(nibAr, forCellWithReuseIdentifier: "artistCell")
    }
    
    @IBAction func selectKindButton(_ sender: Any) {
        showPicker(selectKindButton, list: filter )
    }
    func showPicker(_ sender: UIButton, list: [String]){
        McPicker.showAsPopover(data:[list], fromViewController: self, sourceView: sender, doneHandler:{ [weak self] (selections: [Int : String]) -> Void in
            if let name = selections[0] {
                switch name {
                case "movie":
                    self?.params["media"] = "movie"
                    
                case "podcast":
                    self?.params["media"] = "podcast"
                    
                case "music":
                    self?.params["media"] = "music"
                    
                case "musicVideo":
                    self?.params["media"] = "musicVideo"
                    
                case "audiobook":
                    self?.params["media"] = "audiobook"
                    
                case "shortFilm":
                    self?.params["media"] = "shortFilm"
                    
                case "tvShow":
                    self?.params["media"] = "tvShow"
                    
                case "software":
                    self?.params["media"] = "software"
                    
                case "ebook":
                    self?.params["media"] = "ebook"
                    
                case "all":
                    self?.params["media"] = "all"
                default:
                    break
                }
            }
        }
        )}
}

extension MyTunesListViewController: MyTunesListDisplayLogic{
    func displayMyTunes(viewModel: MyTunesList.Fetch.ViewModel)
    {
        self.viewModel = viewModel
        myTunesCollectionView.reloadData()
    }
}


extension MyTunesListViewController: UICollectionViewDataSource , UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return viewModel?.myTunesList.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let trackCell = collectionView.dequeueReusableCell(withReuseIdentifier: "trackCell", for: indexPath) as! TrackCollectionViewCell? else {return UICollectionViewCell()}
        guard let collectionCell = collectionView.dequeueReusableCell(withReuseIdentifier: "collectionCell", for: indexPath) as! CollectionCollectionViewCell? else {return UICollectionViewCell()}
        guard let artistCell = collectionView.dequeueReusableCell(withReuseIdentifier: "artistCell", for: indexPath) as! ArtistCollectionViewCell? else {return UICollectionViewCell()}
        
        let model = self.viewModel?.myTunesList[indexPath.item]
        
        switch model?.wrapperType {
        case "track":
            trackCell.trackViewUrl.text = "View on iTunes Store"
            trackCell.trackName.text = model?.trackName
            trackCell.wrapperType.text = model?.wrapperType
            trackCell.kind.text = model?.kind
            trackCell.artWorkImageView.kf.setImage(with: URL(string: (model?.artworkUrl100) ?? ""))
            trackCell.trackViewUrl.addTapGesture {
                if let url = URL(string: (model?.trackViewUrl)!) {
                    UIApplication.shared.open(url)
                }
            }
            return trackCell
        case "artist":
            artistCell.artistNameLabel.text = model?.artistName
            artistCell.artistViewUrl.text = "View on iTunes Store"
            artistCell.wrapperTypeLabel.text = model?.wrapperType
            return artistCell
            
        case "collection":
        
            collectionCell.viewUrl.text = "View on iTunes Store"
            collectionCell.collectionName.text = model?.collectionName
            collectionCell.wrapperType.text = model?.wrapperType
            collectionCell.collectionImageView.kf.setImage(with: URL(string: (model?.artworkUrl100) ?? ""))
            collectionCell.viewUrl.addTapGesture {
                if let url = URL(string: (model?.collectionViewUrl)!) {
                    UIApplication.shared.open(url)
                }
            }
            return collectionCell
            
        default:
            return trackCell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToDetails(index: indexPath.item)
    }
}


// MARK: - SearchBar Delegate

extension MyTunesListViewController : UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        NSObject.cancelPreviousPerformRequests(withTarget: self, selector: #selector(MyTunesListViewController.reload), object: nil)
        self.perform(#selector(MyTunesListViewController.reload), with: nil, afterDelay: 1)
    }
    
    @objc func reload() {
        guard let searchText = myTunesSearchBar.text else { return }
        
        if searchText == "" {
            self.viewModel?.myTunesList.removeAll()
            myTunesCollectionView.reloadData()
        } else {
            search(searchText: searchText)
        }
    }
    
    func search(searchText: String){
        self.params["limit"] = "50"
        self.params["term"] = searchText
        print(params)
    }
}

