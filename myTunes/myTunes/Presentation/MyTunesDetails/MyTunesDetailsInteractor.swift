//
//  MyTunesDetailsInteractor.swift
//  myTunes
//
//  Created by MacOS on 24.03.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MyTunesDetailsBusinessLogic: AnyObject {
    func fetchMyTunesDetails()
    func addTuneToFavorites()
    func fetchTunesList()
}

protocol MyTunesDetailsDataStore:AnyObject {
    var myTune: Results? { get set }
}

final class MyTunesDetailsInteractor: MyTunesDetailsBusinessLogic, MyTunesDetailsDataStore {
    var myTune: Results?
    var tunes : [Tunes] = []
    var presenter: MyTunesDetailsPresentationLogic?
    var worker: MyTunesDetailsWorkingLogic?
    var id: Int16?
    init(worker: MyTunesDetailsWorkingLogic) {
        self.worker = worker
    }
    
    func fetchMyTunesDetails() {
        self.presenter?.presentMyTunesDetails(response:.init(myTune: myTune))
    }
    
    func fetchTunesList() {
        worker?.getFavoriteTunesList() { [weak self] result in
            switch result {
            case .success(let response):
                self?.tunes = response
            case .failure(let error):
                print("error")
            }
        }
    }
    
    func addTuneToFavorites() {
        fetchTunesList()
        switch myTune?.wrapperType{
        case "track":
            
            if  tunes.contains(where: {$0.trackId == Int16(truncatingIfNeeded: (myTune?.trackId)!) }){
                presenter?.shakeView()
            }else{
                
                addTune()
            }
        case "collection":
            
            if tunes.contains(where: {$0.collectionId == Int16(truncatingIfNeeded:(myTune?.collectionId)!) }){
                print("zaten ekli")
            }else{
                
                addTune()
            }
            
        case "artist":
            
            if tunes.contains(where: {$0.artistId == Int16(truncatingIfNeeded:(myTune?.artistId)!) }){
                print("zaten ekli")
            }else{
                
                addTune()
            }
            
        default:
            break
        }
    }
    
    func addTune(){
        worker?.addTune(wrapperType: myTune?.wrapperType, artistId : Int16(truncatingIfNeeded: myTune?.artistId ?? 0) , collectionId : Int16(truncatingIfNeeded: myTune?.collectionId ?? 0) , trackId : Int16(truncatingIfNeeded: myTune?.trackId ?? 0) ,  kind: myTune?.kind, artistName: myTune?.artistName, collectionName: myTune?.collectionName, trackName: myTune?.trackName, artworkUrl100: myTune?.artworkUrl100, releaseDate: myTune?.releaseDate, country: myTune?.country, primaryGenreName: myTune?.primaryGenreName, artistViewUrl: myTune?.artistViewUrl, collectionViewUrl: myTune?.collectionViewUrl, trackViewUrl: myTune?.trackViewUrl)
    }
    
    
}
