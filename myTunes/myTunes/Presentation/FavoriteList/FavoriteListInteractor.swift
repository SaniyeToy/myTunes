//
//  FavoriteListInteractor.swift
//  myTunes
//
//  Created by MacOS on 26.03.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import UIKit

protocol FavoriteListBusinessLogic: AnyObject {
    func fetchFavoriteList()
    func removeFavoriteList()
    func removeFavorite(index: Int) 
}

protocol FavoriteListDataStore: AnyObject {
    var favoriteList:[Tunes]? { get set }
}

final class FavoriteListInteractor: FavoriteListBusinessLogic, FavoriteListDataStore{
    var favoriteList: [Tunes]?
    var presenter: FavoriteListPresentationLogic?
    var worker: FavoriteListWorkingLogic?
    init(worker: FavoriteListWorkingLogic) {
        self.worker = worker
    }
    
    func fetchFavoriteList() {
        worker?.getFavoriteTunesList() { [weak self] result in
            switch result {
            case .success(let response):
                self?.favoriteList = response
                guard let favoriteList = self?.favoriteList else { return }
                self?.presenter?.presentFavoriteList(response: FavoriteList.Fetch.Response(favoriteList:favoriteList))
            case .failure(let error):
                self?.presenter?.presentAlert(title: "Error", message: "\(error)")
            }
        }
    }
    
    func removeFavorite(index: Int) {
        favoriteName(index: index)
        worker?.removeFavorite(object: (favoriteList?[index])!)
        fetchFavoriteList()
    }
    
    func removeFavoriteList(){
        worker?.removeFavoriteList()
    }
    
    func favoriteName(index: Int) {
        
        switch favoriteList?[index].wrapperType{
            
        case WrapperType.track.rawValue:
            presenter?.snackBar(message: "\(String(describing: favoriteList?[index].trackName ?? "")) remove from Favorites")
            
        case WrapperType.collection.rawValue:
            presenter?.snackBar(message: "\(String(describing: favoriteList?[index].collectionName ?? ""))")
            
        case WrapperType.artist.rawValue:
            presenter?.snackBar(message: "\(String(describing: favoriteList?[index].artistName ?? ""))")
        default:
            break
        }
    }
}
